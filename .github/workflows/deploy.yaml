name: CD Deploy

# 워크플로우 실행 조건
# PR이 main 브랜치로 merge될 때만 실행
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 전체 테스트 실행 (단위 테스트 + 통합 테스트)
      - name: Run All Tests
        run: ./gradlew test

      # 테스트 커버리지 리포트 생성
      - name: Generate Jacoco Report
        run: ./gradlew jacocoTestReport -x jacocoTestCoverageVerification

      # 코드 스타일 검사
      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest

      # 프로젝트 빌드
      - name: Build Project
        run: ./gradlew clean build -x test

      # 환경 변수 설정
      - name: GitHub Secrets To .env
        run: |
          rm -f .env
          echo "DB_TYPE=mysql" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "STORAGE_BUCKET=${{ secrets.STORAGE_BUCKET }}" >> .env
          echo "STORAGE_BASE_URL=${{ secrets.STORAGE_BASE_URL }}" >> .env
          echo "SWAGGER_PATH=${{ secrets.SWAGGER_PATH }}" >> .env

      # 파일 존재 여부 검증
      - name: Fail if required files missing
        run: |
          [ -f .env ] || (echo "❌ .env 파일 없음" && exit 1)
          [ -f build/libs/green-0.0.1-SNAPSHOT.jar ] || (echo "❌ .jar 파일 없음" && exit 1)

      # 파일 목록 출력 (디버깅용)
      - name: Check generated files
        run: |
          echo "Current path: $(pwd)"
          echo "build/libs:"
          ls -alh build/libs
          echo ".env file:"
          ls -alh .env

      # SSH 키 환경 변수로 설정
      - name: Set SSH Key
        run: echo "SSH_PRIVATE_KEY=$(echo '${{ secrets.EC2_PRIVATE_KEY }}' | base64 --decode)" >> $GITHUB_ENV

      # EC2로 파일 복사
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ env.SSH_PRIVATE_KEY }}
          source: |
            build/libs/green-0.0.1-SNAPSHOT.jar
            .env
          target: "~/backend"

      # EC2에서 애플리케이션 재시작
      - name: Run reload.sh
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            chmod +x ~/reload.sh
            ~/reload.sh
