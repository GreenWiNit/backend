plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'checkstyle'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // dotenv - 환경 변수 관리용
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'

    // DB - local & dev & prod -> 추후 변경 가능
    implementation 'mysql:mysql-connector-java:8.0.33'

    // p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.10.0'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // s3 storage
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.3.0'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:spring-mock-mvc'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// 아래로 Test 관련
tasks.named('test') {
    useJUnitPlatform()
}

// Jacoco Coverage Report
jacoco {
    toolVersion = "0.8.13"
}

// QClass 패턴을 찾는 메서드
def findQClassPatterns() {
    def excludedPatterns = []
    def generatedDir = layout.buildDirectory.dir("generated").get().asFile

    fileTree(generatedDir).include("**/Q*.java")
            .each { File file ->
                def className = file.name.replace('.java', '')
                excludedPatterns.add("**/${className}.class")
            }

    return excludedPatterns
}

// Jacoco 제외 항목 추가
def createFilteredClassDirectories() {
    def defaultExcludedPatterns = [
            '**/GreenApplication.class',
            '**/infra/**'
    ]

    return sourceSets.main.output.classesDirs.files.collect { dirPath ->
        fileTree(
                dir: dirPath,
                excludes: defaultExcludedPatterns + findQClassPatterns()
        )
    }
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(createFilteredClassDirectories()))
    }

    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/html')
    }

    finalizedBy jacocoTestCoverageVerification
}


jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(createFilteredClassDirectories()))
    }

    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }
        }
    }
}

// check style
tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyleMain.source = fileTree('src/main/java')

checkstyle {
    configFile = file("checkstyle/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "checkstyle/naver-checkstyle-suppressions.xml"]
}

checkstyleTest.enabled = false